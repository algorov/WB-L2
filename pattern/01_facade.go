package pattern

import "fmt"

/*
	Реализовать паттерн «фасад».
	Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.

	Чаще используется в ООП. Позволяет скрыть сложность системы путём сведения всех возможных внешних вызовов к одному объекту,
	делегирующему их соответствующим объектам системы. Это по сути решение проблемы унификации интерфеса с набором разрозненных реализаций.

	Плюсы:
		Облегченное взаимодействие со системой. Инкапсулированы детали реализации сложной системы. Просто обращаемся одному объекту, и всё работает.

	Минусы:
		Нет возможности кастомизации, оптимизации.

	Используется:
		1) Упрощение работы с фрейворком или сложной какой-то системой;
		3) Облегченное взаимодействие с "монолитом";
		4) Минимизация связанности.
*/

// Есть первый компанент.
type ComponentOne struct {
}

// Есть второй компанент.
type ComponentTwo struct {
}

// Условная инициализация компонента.
func (c *ComponentOne) Init() {
	fmt.Println("Init component #1")
}

// Условная инициализация компонента.
func (c *ComponentTwo) Init() {
	fmt.Println("Init component #2")
}

// Некая система, состоящая из этих компонентов.
type Machine struct {
	componentOne ComponentOne
	componentTwo ComponentTwo
}

// Запуск этой некой система, которая запускает внутри себя внутренние компоненты.
func (m *Machine) Init() {
	m.componentOne = ComponentOne{}
	m.componentOne.Init()

	m.componentTwo = ComponentTwo{}
	m.componentTwo.Init()
}
